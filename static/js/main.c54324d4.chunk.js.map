{"version":3,"sources":["Table.js","Home.js","Header.js","backend/fixtures.js","backend/displays.js","backend/getFormData.js","backend/urls.js","backend/bootstrap.js","App.js","serviceWorker.js","index.js"],"names":["Table","createTable","display","Object","keys","map","team","key","style","assign","background","styles","tableData","weekArray","index","length","darkgrey","doubleGame","doubleGameData","createHeaders","type","upcomingGameweek","headers","push","i","mappedHeaders","header","column","this","props","Component","padding","flexFlow","alignItems","overflowX","textAlign","height","width","border","fontSize","justifyContent","color","useStyles","makeStyles","theme","home","position","backgroundColor","palette","grey","common","white","marginBottom","spacing","backgroundImage","backgroundSize","backgroundRepeat","backgroundPosition","overlay","top","bottom","right","left","homeContent","breakpoints","up","paddingRight","Home","classes","post","Paper","className","image","src","alt","imageText","Grid","container","item","md","Typography","component","variant","gutterBottom","title","paragraph","description","Link","href","linkText","toolbar","borderBottom","divider","toolbarTitle","flex","toolbarSecondary","toolbarLink","flexShrink","Header","sections","Fragment","Toolbar","section","noWrap","onClick","handleFixtures","fixtures","teams","fixture","isFinished","gameweek","parseInt","homeId","awayId","segment","homeScore","awayScore","ColorBarsType","getColor","goals","medianGoals","maxDistanceFromMedian","colorBarsType","lightness","sat","hue","Math","abs","lightnessConstant","loadData","fetch","then","response","ok","Error","statusText","json","data","weeks","week","console","error","handleEvents","catch","log","updateTeamInfo","teamDict","teamId","handleTeams","gfArray","gaArray","sort","a","b","medianGf","medianGa","gfMaxDistanceFromMedian","max","gaMaxDistanceFromMedian","defendersDisplay","attackersDisplay","defendersUpcomingFixtures","attackersUpcomingFixtures","defendersWeekArray","attackersWeekArray","forEach","oppId","oppGf","oppGa","defenderGameObject","attackerGameObject","createDisplays","App","selectView","event","preventDefault","setState","view","target","showDisplay","state","imgText","renderDesktopScreen","CssBaseline","Container","maxWidth","res","Boolean","window","location","hostname","match","ReactDOM","render","displayUrl","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c54324d4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Table extends Component {\n  createTable = (display) => {\n    // let high = 95;\n    // let item = JSON.stringify({\"background\": `hsl(0, 65%, ${high}%)`});\n    return Object.keys(display).map((team) => {\n      team = display[team];\n      return (\n        <tr key={team[\"short_name\"]}>\n          <td style={Object.assign({}, { background: team[\"goals\"][\"color\"] }, styles.tableData)} >\n            {team[\"goals\"][\"value\"]}\n          </td>\n          <th>{team[\"short_name\"]}</th>\n          {team[\"upcoming_fixtures\"].map((weekArray, index) => {\n            if (weekArray.length === 1) {\n              return (\n                <td\n                  key={index}\n                  style={Object.assign({}, { background: weekArray[0][\"color\"] }, styles.tableData)}\n                >\n                  {weekArray[0][\"value\"]}\n                </td>\n              )\n            } if (weekArray.length === 0) {\n              return (\n                <td\n                  key={index}\n                  style={Object.assign({}, styles.darkgrey, styles.tableData)}\n                ></td>\n              )\n            } else { // double game week\n              return (\n                <td key={index} style={styles.doubleGame}>\n                  <div style={Object.assign({}, { background: weekArray[0][\"color\"] }, styles.doubleGameData)}>\n                    {weekArray[0][\"value\"]}\n                  </div>\n                  <div style={Object.assign({}, { background: weekArray[1][\"color\"] }, styles.doubleGameData)}>\n                    {weekArray[1][\"value\"]}\n                  </div>\n                </td>\n              )\n            }\n          })}\n        </tr>\n      );\n    });\n  };\n\n  createHeaders = (type, upcomingGameweek) => {\n    let headers = [];\n    (type === \"DEFENDERS\") ? headers.push(\"GA\") : headers.push(\"GF\");\n    \n    headers.push(\"Team\");\n    for (let i = upcomingGameweek; i < 39; ++i) {\n      i < 10 ? headers.push(\"0\" + i) : headers.push(i);\n    }\n    let mappedHeaders = headers.map((header) => {\n      return (\n        <th key={header} style={styles.column}>\n          {header}\n        </th>\n      );\n    });\n    return <tr>{mappedHeaders}</tr>;\n  };\n\n  render() {\n    return (\n      <div style={styles.background}>\n        <table>\n          <tbody>\n            {this.createHeaders(this.props.type, this.props.upcomingGameweek)}\n            {this.createTable(this.props.display)}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Table;\n\nconst styles = {\n  background: {\n    padding: \"2vh 2vw\",\n    display: \"flex\",\n    flexFlow: \"column no-wrap\",\n    alignItems: \"stretch\",\n    background: \"lightgrey\",\n    overflowX: \"auto\",\n  },\n  column: {\n    textAlign: \"center\",\n  },\n  tableData: {\n    height: \"4vh\",\n    width: \"2.2vw\",\n    textAlign: \"center\",\n    border: \"1px solid black\",\n    fontSize: \"1vw\",\n  },\n  doubleGame: {\n    border: \"1px solid black\",\n    width: \"2.2vw\",\n  },\n  doubleGameData: {\n    height: \"2vh\",\n    fontSize: \".75vw\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  darkgrey: {\n    background: \"darkgrey\",\n    color: \"darkgrey\",\n  },\n  // darkred: {\n  //   background: \"#ec2727\",\n  // },\n  // red: {\n  //   background: \"#f26666\",\n  // },\n  // lightred: {\n  //   background: \"#f9b5b5\",\n  // },\n  // grey: {\n  //   background: \"#EBEBE4\",\n  // },\n  // lightgreen: {\n  //   background: \"#6cea70\",\n  // },\n  // green: {\n  //   background: \"#1bc020\",\n  // },\n  // darkgreen: {\n  //   background: \"#169a1a\",\n  // },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Link from '@material-ui/core/Link';\n\nconst useStyles = makeStyles(theme => ({\n  home: {\n    position: 'relative',\n    backgroundColor: theme.palette.grey[800],\n    color: theme.palette.common.white,\n    marginBottom: theme.spacing(4),\n    backgroundImage: 'url(https://source.unsplash.com/random)',\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: 'center',\n  },\n  overlay: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    right: 0,\n    left: 0,\n    backgroundColor: 'rgba(0,0,0,.3)',\n  },\n  homeContent: {\n    position: 'relative',\n    padding: theme.spacing(3),\n    [theme.breakpoints.up('md')]: {\n      padding: theme.spacing(6),\n      paddingRight: 0,\n    },\n  },\n}));\n\nexport default function Home(props) {\n  const classes = useStyles();\n  const { post } = props;\n\n  return (\n    <Paper className={classes.home} style={{ backgroundImage: `url(${post.image})` }}>\n      {/* Increase the priority of the hero background image */}\n      {<img style={{ display: 'none' }} src={post.image} alt={post.imageText} />}\n      <div className={classes.overlay} />\n      <Grid container>\n        <Grid item md={6}>\n          <div className={classes.homeContent}>\n            <Typography component=\"h1\" variant=\"h3\" color=\"inherit\" gutterBottom>\n              {post.title}\n            </Typography>\n            <Typography variant=\"h5\" color=\"inherit\" paragraph>\n              {post.description}\n            </Typography>\n            <Link variant=\"subtitle1\" href=\"#\">\n              {post.linkText}\n            </Link>\n          </div>\n          <div className={classes.homeContent}>\n            Hello\n          </div>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n}\n\nHome.propTypes = {\n  post: PropTypes.object,\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\n// import Button from '@material-ui/core/Button';\n// import Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\n\nconst useStyles = makeStyles(theme => ({\n  toolbar: {\n    borderBottom: `1px solid ${theme.palette.divider}`,\n  },\n  toolbarTitle: {\n    flex: 1,\n  },\n  toolbarSecondary: {\n    justifyContent: 'space-between',\n    overflowX: 'auto',\n  },\n  toolbarLink: {\n    padding: theme.spacing(1),\n    flexShrink: 0,\n  },\n}));\n\nexport default function Header(props) {\n  const classes = useStyles();\n  // const { sections, title } = props;\n  const { sections } = props;\n\n  return (\n    <React.Fragment>\n      {/* <Toolbar className={classes.toolbar}>\n        <Button size=\"small\">Subscribe</Button>\n        <Typography\n          component=\"h2\"\n          variant=\"h5\"\n          color=\"inherit\"\n          align=\"center\"\n          noWrap\n          className={classes.toolbarTitle}\n        >\n          {title}\n        </Typography>\n        <Button variant=\"outlined\" size=\"small\">\n          Sign up\n        </Button>\n      </Toolbar> */}\n      <Toolbar component=\"nav\" variant=\"dense\" className={classes.toolbarSecondary}>\n        {sections.map(section => (\n          <Link\n            title={section.title}\n            color=\"inherit\"\n            noWrap\n            key={section.title}\n            variant=\"body2\"\n            href={\"#\"}\n            className={classes.toolbarLink}\n            onClick={section.onClick}\n          >\n            {section.title}\n          </Link>\n        ))}\n      </Toolbar>\n    </React.Fragment>\n  );\n}\n\nHeader.propTypes = {\n  sections: PropTypes.array,\n  title: PropTypes.string,\n};","import { fixturesUrl } from './urls';\n\nexport const updateTeamInfo = (teams, upcomingGameweek) => {\n  return fetch(fixturesUrl)\n  .then((response) => {\n    if (!response.ok) throw Error(response.statusText);\n    return response.json();\n  })\n  .then((data) => {\n    return handleFixtures(data, teams, upcomingGameweek);\n  })\n  .catch((error) => console.log(error)); // eslint-disable-line no-console\n}\n\nconst handleFixtures = (fixtures, teams, upcomingGameweek) => {\n  for (let fixture in fixtures) {\n    fixture = fixtures[fixture];\n    const isFinished = fixture[\"finished\"];\n  \n    // if a match is postponed, the event will be null. We only want to add games that are being played\n    if (fixture[\"event\"] != null) {\n      const gameweek = parseInt(fixture[\"event\"]); // gameweek is 1-indexed, but so is upcomingGameweek\n      const homeId = fixture[\"team_h\"];\n      const awayId = fixture[\"team_a\"];\n      /* \n        If the gameweek of the fixture is before the upcoming gameweek,\n        add it to the previous matches segment. If not, add it to the future opponents segment.\n        Note: Just because gameweek < upcomingGameweek does not mean the game has been played yet.\n        If it is Saturday morning on gameweek 15, then upcomingGameweek will equal 16.\n        However, a majority of the games in gameweek 15 will not have been played yet.\n        I am using upcomingGameweek rather than currentGameweek because once the deadline has\n        passed for gameweek 15, an owner cannot change his team for that gameweek.\n        Only gameweek 16 and on is important in this example\n      */\n      const segment = gameweek < upcomingGameweek ? \"previous_opponents\" : \"future_opponents\";\n\n      // add fixtures\n      teams[homeId][segment][gameweek].push(awayId);\n      teams[awayId][segment][gameweek].push(homeId);\n\n      // if the fixture is finished, add the scores for the two team's gf and ga\n      if (isFinished) {\n        const homeScore = fixture[\"team_h_score\"];\n        const awayScore = fixture[\"team_a_score\"];\n        teams[homeId][\"gf\"] += homeScore;\n        teams[homeId][\"ga\"] += awayScore;\n        teams[awayId][\"gf\"] += awayScore;\n        teams[awayId][\"ga\"] += homeScore;\n      }\n    }\n  }\n  return teams;\n};","const ColorBarsType = {\n  HIGH_GOOD: 1,\n  LOW_GOOD: 2\n};\nconst greenHue = 122;\nconst greenSat = 75;\nconst maxGreenLightness = 75;\nconst minGreenLightness = 35;\nconst redHue = 0;\nconst redSat = 84;\nconst maxRedLightness = 85;\nconst minRedLightness = 54;\n\nexport const createDisplays = (teams, upcomingGameweek) => {\n  // create the goals for and goals against arrays using the teams object\n  let gfArray = [];\n  let gaArray = [];\n  for (const team in teams) {\n    gfArray.push(teams[team][\"gf\"]);\n    gaArray.push(teams[team][\"ga\"]);\n  }  \n  gfArray.sort((a, b) => a - b); // a - b sorts in ascending order (b - a for descending)\n  gaArray.sort((a, b) => a - b);\n  const medianGf = (gfArray[9] + gfArray[10]) / 2; // 20 teams so take the middle of 9th and 10th team (0-indexed)\n  const medianGa = (gaArray[9] + gaArray[10]) / 2;\n\n  // To create the constant factor for all displays,\n  // we need to first figure out the largest differnece between max/min and the respective median\n  const gfMaxDistanceFromMedian = Math.max(medianGf - gfArray[0], gfArray[19] - medianGf);\n  const gaMaxDistanceFromMedian = Math.max(medianGa - gaArray[0], gaArray[19] - medianGa);  \n\n\n  let display = {\n    \"defenders_display\": [],\n    \"attackers_display\": [],\n    \"upcoming_gameweek\": upcomingGameweek\n  }\n\n  for (let team in teams) {\n    team = teams[team];\n\n    let defendersDisplay = {};\n    let attackersDisplay = {};\n\n    defendersDisplay[\"short_name\"] = team[\"short_name\"];\n    attackersDisplay[\"short_name\"] = team[\"short_name\"];\n\n    let defendersUpcomingFixtures = []; // used for defenders display\n    let attackersUpcomingFixtures = []; // used for attackers display\n    for (const week in team[\"future_opponents\"]) {\n      let defendersWeekArray = [];\n      let attackersWeekArray = [];\n      team[\"future_opponents\"][week].forEach(oppId => {\n        const oppGf = teams[oppId][\"gf\"];\n        const oppGa = teams[oppId][\"ga\"];\n        let defenderGameObject = {\n          \"value\": oppGf,\n          \"color\": getColor(oppGf, medianGf, gfMaxDistanceFromMedian, ColorBarsType.LOW_GOOD)\n        }\n        let attackerGameObject = {\n          \"value\": oppGa,\n          \"color\": getColor(oppGa, medianGa, gaMaxDistanceFromMedian, ColorBarsType.HIGH_GOOD)\n        }\n        defendersWeekArray.push(defenderGameObject);\n        attackersWeekArray.push(attackerGameObject);\n      })\n      defendersUpcomingFixtures.push(defendersWeekArray);\n      attackersUpcomingFixtures.push(attackersWeekArray);\n    }\n    defendersDisplay[\"upcoming_fixtures\"] = defendersUpcomingFixtures;\n    attackersDisplay[\"upcoming_fixtures\"] = attackersUpcomingFixtures;\n\n    defendersDisplay[\"goals\"] = {\n      \"value\": team[\"ga\"],\n      \"color\": getColor(team[\"ga\"], medianGa, gaMaxDistanceFromMedian, ColorBarsType.LOW_GOOD)\n    };\n    attackersDisplay[\"goals\"] = {\n      \"value\": team[\"gf\"],\n      \"color\": getColor(team[\"gf\"], medianGf, gfMaxDistanceFromMedian, ColorBarsType.HIGH_GOOD)\n    };\n\n    display[\"defenders_display\"].push(defendersDisplay);\n    display[\"attackers_display\"].push(attackersDisplay);\n  }\n  return display;\n}\n\nfunction getColor(goals, medianGoals, maxDistanceFromMedian, colorBarsType) {\n  let lightness;\n  let sat;\n  let hue;\n  if (Math.abs(medianGoals - goals) <= 0.5) { // color white\n    hue = 100;\n    sat = 100;\n    lightness = 100;\n  } else if ((goals > medianGoals && colorBarsType === ColorBarsType.HIGH_GOOD) ||\n      (goals < medianGoals && colorBarsType === ColorBarsType.LOW_GOOD)) { // color green\n    // close to median = close to white = maxGreenLightness\n    // far from median = darker color = minGreenLightness\n    // we need to figure out the value (lightnessConstant) at which the furthest value away from the median will achieve the darkest color we want\n    // maxGreenLightness - (lightnessConstant * medianDistance) = minGreenLightness\n    let lightnessConstant = (maxGreenLightness - minGreenLightness) / maxDistanceFromMedian;\n    hue = greenHue;\n    sat = greenSat;\n    lightness = maxGreenLightness - (Math.abs(goals - medianGoals) * lightnessConstant)\n  } else { // color red\n    let lightnessConstant = (maxRedLightness - minRedLightness) / maxDistanceFromMedian;\n    hue = redHue;\n    sat = redSat;\n    lightness = maxRedLightness - (Math.abs(goals - medianGoals) * lightnessConstant)\n  }\n  return `hsl(${hue}, ${sat}%, ${lightness}%)`\n}\n\n// const createColorBrackets = (arr) => {\n//   arr.sort((a,b) => a - b);\n//   // 12 is a completely arbitrary number that I think looks nice\n//   // If you reduce the number of buckets, you may want to change the contrast on some of color ranges\n//   const numBuckets = 12;\n//   const max = Math.max.apply(null, arr);\n//   const min = Math.min.apply(null, arr);\n\n//   // bucketDistance = max - min value in a bucket\n//   // if bucket = [12, 13, 15, 15, 16], then bucketDistance = 16 - 12 = 4\n//   // We initialize bucketDistance to a value that we know we can use to create k buckets\n//   let bucketDistance = Math.ceil((max - min) / numBuckets) + 1;\n\n//   // We will use canMakeSubsets to try and reduce the bucketDistance to as small as possible.\n//   // Reducing bucketDistance helps reduce the case where the final bucket only has a few teams which occurs quite frequently\n//   // We are looking for an even distribution rather than fronloading the first few buckets\n//   while (canMakeKBucketsWithBucketDistance(arr, numBuckets, bucketDistance - 1)) {\n//     bucketDistance -= 1;\n//   }\n\n//   // Once we know the smallest possible value of bucketDistance,\n//   // we will use that value to create the color brackets\n//   return makeBuckets(arr, bucketDistance);\n// }\n\n// // k: number of buckets we are trying to create\n// // bucketDistance: max - min value in a bucket\n// // This function takes in an array of ints and tries to break up the array into subsets\n// // Each subset will have a bucketDistance <= maxBucketDistance\n// // Returns true if we can do this using <= k buckets\n// // (I don't use an anonymous function here because I like putting this below the function createColorBrackets)\n// function canMakeKBucketsWithBucketDistance(arr, k, maxBucketDistance) {\n//   let numBucketsNeeded = 0;\n//   let bucketMax = arr[0] + maxBucketDistance;\n//   for (let i = 0; i < arr.length; ++i) {\n//     if (arr[i] > bucketMax) {\n//       numBucketsNeeded += 1;\n//       bucketMax = arr[i] + maxBucketDistance;\n//     }\n//   }\n//   // because the last bucket never gets added (as it's not > than bucketMax, we have to add 1 to account for the last bucket\n//   return numBucketsNeeded + 1 <= k;\n// }\n\n// // Use a greedy alg to create the minimum number of buckets possible with a bucketDistance of maxBucketDistance\n// function makeBuckets(arr, maxBucketDistance){\n//   let buckets = [];\n//   let bucket = [];\n//   bucket.push(arr[0]);\n//   bucket.push(arr[0] + maxBucketDistance);\n//   buckets.push(bucket);\n//   let bucketMax = arr[0] + maxBucketDistance;\n//   for (let i = 0; i < arr.length; ++i) {\n//     if (arr[i] > bucketMax) {\n//       bucket = [];\n//       bucket.push(arr[i]);\n//       bucket.push(arr[i] + maxBucketDistance);\n//       buckets.push(bucket);\n//       bucketMax = arr[i] + maxBucketDistance;\n//     }\n//   }\n//   return buckets;\n// };","import { updateTeamInfo } from './fixtures';\n// import { handlePlayers } from './players';\nimport { handleEvents, handleTeams } from './bootstrap';\nimport { createDisplays } from './displays';\nimport { bootstrapUrl } from './urls';\n\nexport const loadData = () => {\n  // We must call bootstrap-static before fixtures and wait for the result as\n  // fixtures relies on the teams to be created and for us to know the current gameweek\n  let upcomingGameweek;\n  return fetch(bootstrapUrl)\n  .then((response) => {\n    if (!response.ok) throw Error(response.statusText);\n    return response.json();\n  })\n  .then((data) => {\n    upcomingGameweek = handleEvents(data[\"events\"]);\n    let teams = handleTeams(data[\"teams\"], upcomingGameweek);\n    // let players = handlePlayers(data[\"elements\"]);\n    return updateTeamInfo(teams, upcomingGameweek);\n  })\n  .then((teams) => {\n    return createDisplays(teams, upcomingGameweek);\n  })\n  .catch((error) => console.log(error))\n}\n\n\n/*\n  returns\n  {\n    \"AttackersDisplay\": {\n      \"TEAM_SHORT_0\": WeekArray[num_gameweeks_remaining],\n      \"TEAM_SHORT_1\": WeekArray[num_gameweeks_remaining],\n      ...\n      \"TEAM_SHORT_19\": WeekArray[num_gameweeks_remaining]\n    }\n    \"DefendersDisplay\": {\n      \"TEAM_SHORT_0\": WeekArray[num_gameweeks_remaining],\n      \"TEAM_SHORT_1\": WeekArray[num_gameweeks_remaining],\n      ...\n      \"TEAM_SHORT_19\": WeekArray[num_gameweeks_remaining]\n    }\n  }\n\n  WeekArray = GameObject[# games in gameweek]\n\n  GameObject = {\n    \"value\": int,\n    \"color\": (hex)string\n  }\n  */","export const bootstrapUrl = \"https://cors-anywhere.herokuapp.com/https://fantasy.premierleague.com/api/bootstrap-static/\";\nexport const fixturesUrl = \"https://cors-anywhere.herokuapp.com/https://fantasy.premierleague.com/api/fixtures/\";\n","// for now, just returns the current gameweek (is_current = true)\n// the id of the gameweek is 1-indexed (1-38)\nexport const handleEvents = (weeks) => {\n  for (const week of weeks) {\n    if (week[\"is_next\"] === true) {\n      return week[\"id\"];\n    }\n  }\n  console.error(\"handleEvents has not found the current gameweek\");\n  console.error(\"I have not error handled the first or last week of the season as I'm not sure how FPL sends the data\");\n  return 1;\n}\n\nexport const handleTeams = (teams, upcomingGameweek) => {\n  let teamDict = {};\n  for (const team in teams) {\n    let teamId = teams[team][\"id\"];\n    teamDict[teamId] = {\n      \"short_name\": teams[team][\"short_name\"],\n      \"gf\": 0,\n      \"ga\": 0,\n      \"previous_opponents\": {},\n      \"future_opponents\": {}\n    };\n\n    // This will initialize all of the arrays to handle blank and double gameweeks\n    for (let i = 1; i < upcomingGameweek; ++i) {\n      teamDict[teamId][\"previous_opponents\"][i] = [];\n    }\n    for (let i = upcomingGameweek; i < 39; ++i) {\n      teamDict[teamId][\"future_opponents\"][i] = [];\n    }\n  }\n  return teamDict;\n}","import React, { Component } from \"react\";\nimport Table from \"./Table.js\";\nimport Home from \"./Home.js\";\nimport Header from \"./Header.js\";\nimport Container from \"@material-ui/core/Container\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { loadData } from './backend/getFormData';\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      defendersDisplay: [],\n      attackersDisplay: [],\n      upcomingGameweek: 1,\n      view: \"Home\",\n    };\n  }\n\n  componentDidMount() {\n    loadData().then(res => {\n      this.setState({\n        defendersDisplay: res[\"defenders_display\"],\n        attackersDisplay: res[\"attackers_display\"],\n        upcomingGameweek: res[\"upcoming_gameweek\"]\n      });\n    });\n  }\n\n  selectView = (event) => {\n    event.preventDefault();\n    this.setState({\n      view: event.target.title,\n    });\n  };\n\n  showDisplay = () => {\n    const mainFeaturedPost = {\n      title: \"FPL Scheduling Tool\",\n      description:\n        \"This tool shows the goals for and against, rather than the opponent they are playing\",\n      image: \"./PL_Banner.jpg\",\n      imgText: \"\",\n      linkText: \"\",\n    };\n\n    return this.state.view === \"Defenders\" ? (\n      <Table\n        display={this.state.defendersDisplay}\n        upcomingGameweek={this.state.upcomingGameweek}\n        type=\"DEFENDERS\"\n      />\n    ) : this.state.view === \"Attackers\" ? (\n      <Table\n        display={this.state.attackersDisplay}\n        upcomingGameweek={this.state.upcomingGameweek}\n        type=\"ATTACKERS\"\n      />\n    ) : this.state.view === \"Home\" ? (\n      <Home post={mainFeaturedPost} />\n    ) : (\n      <div>Error</div>\n    );\n  };\n\n  renderDesktopScreen = () => {\n    const sections = [\n      { title: \"Home\", onClick: this.selectView },\n      { title: \"Defenders\", onClick: this.selectView },\n      { title: \"Attackers\", onClick: this.selectView },\n    ];\n\n    return (\n      <React.Fragment>\n        <CssBaseline />\n        <Container maxWidth=\"lg\">\n          <Header title=\"FPL Tool\" sections={sections} />\n          {this.showDisplay()}\n        </Container>\n      </React.Fragment>\n    );\n  };\n\n  render() {\n    return this.renderDesktopScreen();\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nlet displayUrl = \"http://127.0.0.1:5000/mainDisplays\";\n\nReactDOM.render(\n  <App displayUrl={displayUrl} />,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}